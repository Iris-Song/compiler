P ::= N declare_list
declare_list ::= declare declare_list
declare_list ::= declare
declare ::= int ID M A func_declare
declare ::= int ID ;
declare ::= void ID M A func_declare
A ::= 
func_declare ::= ( para ) stc_block
para ::= para_list
para ::= void
para_list ::= param
para_list ::= param , para_list
param ::= int ID
stc_block ::= { inner_declare stc_list }
inner_declare ::= 
inner_declare ::= inner_var_declare ; inner_declare
inner_var_declare ::= int ID
stc_list ::= stc M stc_list
stc_list ::= stc
stc ::= if_stc
stc ::= while_stc
stc ::= return_stc
stc ::= assign_stc
assign_stc ::= ID = exp ;
return_stc ::= return ;
return_stc ::= return exp ;
while_stc ::= while M ( exp ) A stc_block
if_stc ::= if ( exp ) A stc_block
if_stc ::= if ( exp ) A stc_block N else M A stc_block
N ::=
M ::=
exp ::= add_exp
exp ::= add_exp > add_exp
exp ::= add_exp < add_exp
exp ::= add_exp == add_exp
exp ::= add_exp >= add_exp
exp ::= add_exp <= add_exp
exp ::= add_exp != add_exp
add_exp ::= item
add_exp ::= item + add_exp
add_exp ::= item - add_exp
item ::= factor
item ::= factor * item
item ::= factor / item
factor ::= NUM
factor ::= ( exp )
factor ::= ID ( argu_list )
factor ::= ID 
argu_list ::= 
argu_list ::= exp
argu_list ::= exp , argu_list
factor ::= array 
array ::= ID [ factor ]
array ::= ID [ factor ] [ factor ] 
inner_var_declare ::= int ID [ factor ] 
inner_var_declare ::= int ID [ factor ] [ factor ]
assign_stc ::= array = exp ;
